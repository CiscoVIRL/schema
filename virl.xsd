<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://www.cisco.com/VIRL" version="0.95"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	xmlns:virl="http://www.cisco.com/VIRL">

	<xs:annotation>
		<xs:documentation>
			Topology schema for VIRL, v0.95
			(C) Copyright 2012-2016 Cisco Systems Inc.  All rights reserved.
		</xs:documentation>
	</xs:annotation>

	<xs:element name="topology">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="virl:extensible">
					<xs:sequence>
						<xs:choice maxOccurs="unbounded" minOccurs="0">
							<xs:element name="group" type="virl:groupType"/>
							<xs:element name="node" type="virl:nodeType"/>
						</xs:choice>
						<xs:element name="annotations">
							<xs:complexType>
								<xs:choice maxOccurs="unbounded" minOccurs="0">
									<xs:element name="rect" type="virl:rectangleType"/>
									<xs:element name="ellipse" type="virl:ellipseType"/>
									<xs:element name="line" type="virl:lineType"/>
									<xs:element name="text" type="virl:textType"> </xs:element>
								</xs:choice>
							</xs:complexType>
						</xs:element>
						<xs:element name="connection" type="virl:connectionType" minOccurs="0"
							maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="schemaVersion" type="xs:decimal">
						<xs:annotation>
							<xs:documentation>This optional decimal value is used to indicate the instance document's schema version compatibility, which is not necessarily the version of the schema that updated the document.  VM Maestro uses this to enforce version specific changes.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="simulationEngine" default="None">
						<xs:annotation>
							<xs:documentation>
								This specifies which validation rules should be enforced before sending the document to the simulation back-end.  This may be as simple as warning the user about incompatibilities or missing elements (which is what VM Maestro does through visual problem markers on the graphical editor).
								Note: The current list of available options for this attribute is just a suggestion, as there are currently no other implementers.
							</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="None"/>
								<xs:enumeration value="VXR"/>
								<xs:enumeration value="OPENSTACK"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="connectionType">
		<xs:annotation>
			<xs:documentation>
				Connections define links (physical or not) between any model elements.
				A connection's endpoints may be nodes, but may also be a model element within a node.
				For instance, when connecting to a CRS1, it may terminate at a specific port within the platform complex.
				For bi-direction connections, the target and source elements are interchangeable, but that is up to the actual model's interpretation.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="src" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
							The src and dst attributes are XPath expressions identifying the connection's endpoints.
							Note: In the case of using pre-built components, it is possible that these refer to internal components that are not necessarily present in the document.  Parsers must allow for this.  (Please contact me, Dan Bourque, for suggestions on how to achieve this)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="dst" use="required" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="groupType">
		<xs:annotation>
			<xs:documentation>A group may contain any number of sub-groups and/or nodes, allowing us unlimited depth nesting.  This effectively allows us to define arbitrarily huge topologies while allowing the UI to remain performant and intuitive.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:choice maxOccurs="unbounded" minOccurs="0">
					<xs:element name="group" type="virl:groupType"/>
					<xs:element name="node" type="virl:nodeType"/>
				</xs:choice>
				<xs:attribute name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>Any string, rendered as its label in VM Maestro. It may include special characters (e.g. newline, accents, etc), but must be escape-sequenced.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="nodeType">
		<xs:annotation>
			<xs:documentation>Nodes represent all edge devices on a network, and are the basic building blocks of a topology.  A node may be as simple as an IP Phone, or as complex as a fully stacked CRS1.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:sequence>
					<xs:element name="interface" type="virl:interfaceType" minOccurs="0"
						maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Any string, rendered as its label in VM Maestro. It may include special characters (e.g. newline, accents, etc), but must be escape-sequenced.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" default="SIMPLE">
					<xs:annotation>
						<xs:documentation>This indicates the node's type, and determines which (if any) schema specific validation rules to enforce on it.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="SIMPLE"/>
							<xs:enumeration value="DETAILED"/>
							<xs:enumeration value="ASSET"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="subtype" type="xs:string">
					<xs:annotation>
						<xs:documentation>If used, this attribute indicates a more specific category of node.  The list of valid subtypes depends on the back end used to simulate the topology.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="location" type="xs:string">
					<xs:annotation>
						<xs:documentation>Specifies the node's x/y location on a canvas, in a comma-separated x,y string.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="vmImage" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the OpenStack VM Image to use for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="vmFlavor" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional parameter may specify the OpenStack's Flavor (a.k.a. profile) to use for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="vmVolume" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional parameter may specify the OpenStack's Volume to use for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv4" type="virl:ipv4Type"/>
				<xs:attribute name="ipv6" type="virl:ipv6Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPV6 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="excludeFromLaunch" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>This optional attribute indicates whether or not this node is to be skipped during the simulation launch.  By default, all nodes in a topology are launched.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="interfaceType">
		<xs:annotation>
			<xs:documentation>Nodes of type ROUTER may declare interfaces.  Nodes of type VXR expose their interfaces by declaring ports within the VXR platform complex instead.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="id" type="virl:arrayOfInteger"/>
				<xs:attribute name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>Any string.  The valid format, such as GigabitEthernet0/0/0/2, depends on the parent node's subtype. This string will be rendered as a connection endpoint's label decoration in VM Maestro.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv4" type="virl:ipv4Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv4 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv6" type="virl:ipv6Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv6 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="netPrefixLenV4">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv4 net prefix length for this node.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="1"/>
							<xs:maxInclusive value="32"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="netPrefixLenV6">
					<xs:annotation>
						<xs:documentation> This optional attribute may specify the IPv6 net prefix length for this node.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="1"/>
							<xs:maxInclusive value="128"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="extensible">
		<xs:sequence>
			<xs:element name="extensions" minOccurs="0">
				<xs:annotation>
					<xs:documentation>An extensions block may be added to any abstract model object.  This extensions block contains one or more entry, which is a key/value pair, allowing any metadata to be attached to any model element.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="entry" maxOccurs="unbounded">
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:attribute name="key" type="xs:string"/>
										<xs:attribute name="type" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													This type field will typically be any of the java.lang.* classes, such as String, Integer, Boolean, etc.
													However, it may even be any custom package's class, such as com.cisco.MySpiffyClass.  The only requirement is that this class's .toString() output may be used as the input parameter to the same class's constructor, in order to produce an exact copy of the original instance.
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="ipv4Type">
		<xs:annotation>
			<xs:documentation>
	        The ipv4Type data type is an xs:string of decimal digits separated by '.' (period) characters.  It
	        represents the 32-bit dotted-decimal notation of IPv4 addresses.  Valid IPv4 addresses contain a series of four
	        one-byte long decimal numbers (0 - 255) separated by the '.' character (a total of three '.' characters
	        appear).  A valid value of the IPv4Address data type is "212.23.123.0".  See RFC 790 in Section 2.2.2 for
	        further details on IPv4 addresses.
	      </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern
				value="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
			/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ipv6Type">
		<xs:annotation>
			<xs:documentation>
		        The ipv6Type data type is an xs:string of hexadecimal digits ('0'-'9' and 'A'-'F' or 'a'-'f')
		        separated by ':' (colon) characters.  It represents the 128-bit notation of IPv6 addresses.  Fully expanded
		        IPv6 addresses contain a series of eight two-byte long hexadecimal numbers separated by the ":" character (a
		        total of seven ':' characters appear).  A single two-byte long hexadecimal number contains up to four
		        hexadecimal digits.  All valid IPv6 addresses are supported in the MDL.  A valid value of the ipv6Type
		        data type is "2001:DB8:0000:0056:0000:ABCD:EF12:1234".  See RFC 2460 for further details on IPv6 addresses and
		        valid shorthand notations.
		      </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern
				value="((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})))(%.+)?"
			/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="arrayOfInteger">
		<xs:annotation>
			<xs:documentation>Space separated number. The valid format, such as 0 0 0 2, or 0 1, depends on the parent node's subtype.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9]+(\s[0-9]+)*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="colorInHex">
		<xs:annotation>
			<xs:documentation>The color, using hexadecimal notation. It's the value of red&lt;&lt;16|green&lt;&lt;8|blue, left-padded to fill 6 hex chars.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="strokePattern">
		<xs:restriction base="xs:string">
			<xs:enumeration value="solid"/>
			<xs:enumeration value="dot"/>
			<xs:enumeration value="dash"/>
			<xs:enumeration value="dash-dot"/>
			<xs:enumeration value="dash-dot-dot"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="fontFamily">
		<xs:restriction base="xs:string">
			<xs:enumeration value="sans-serif"/>
			<xs:enumeration value="serif"/>
			<xs:enumeration value="monospace"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="textAnchor">
		<xs:restriction base="xs:string">
			<xs:enumeration value="start"/>
			<xs:enumeration value="middle"/>
			<xs:enumeration value="end"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="arrowType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none"/>
			<xs:enumeration value="open-arrow"/>
			<xs:enumeration value="closed-arrow"/>
			<xs:enumeration value="diamond"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="rectangleType">
		<xs:annotation>
			<xs:documentation>A rectangle annotation.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="x" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The rectangle's left edge.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The rectangle's top edge.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="radius" type="xs:integer" default="0">
			<xs:annotation>
				<xs:documentation>The radius of the rectangle's rounded edges.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="width" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The rectangle's width.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="height" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The rectangle's height.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill-opacity" type="xs:float" default="1.0">
			<xs:annotation>
				<xs:documentation>The fill's opacity.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill" type="virl:colorInHex" default="000000">
			<xs:annotation>
				<xs:documentation>The fill's color.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-opacity" type="xs:float" default="1.0">
			<xs:annotation>
				<xs:documentation>The border's opacity.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke" type="virl:colorInHex" default="000000">
			<xs:annotation>
				<xs:documentation>The border's color.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-width" type="xs:integer" default="1">
			<xs:annotation>
				<xs:documentation>The border's width.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-pattern" type="virl:strokePattern" default="solid">
			<xs:annotation>
				<xs:documentation>The border's pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="ellipseType">
		<xs:annotation>
			<xs:documentation>An ellipse annotation.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="x" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The ellipse's left edge.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The ellipse's top edge.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="width" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The ellipse's width.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="height" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The ellipse's height.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill-opacity" type="xs:float" default="1.0">
			<xs:annotation>
				<xs:documentation>The fill's opacity.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fill" type="virl:colorInHex" default="000000">
			<xs:annotation>
				<xs:documentation>The fill's color.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-opacity" type="xs:float" default="1.0">
			<xs:annotation>
				<xs:documentation>The border's opacity.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke" type="virl:colorInHex" default="000000">
			<xs:annotation>
				<xs:documentation>The border's color.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-width" type="xs:integer" default="1">
			<xs:annotation>
				<xs:documentation>The border's width.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-pattern" type="virl:strokePattern" default="solid">
			<xs:annotation>
				<xs:documentation>The border's pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="lineType">
		<xs:annotation>
			<xs:documentation>A line annotation.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="x1" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The X component of the start point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y1" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The Y component of the start point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="x2" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The X component of the end point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="y2" type="xs:integer" use="required">
			<xs:annotation>
				<xs:documentation>The Y component of the end point.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="marker-start" type="virl:arrowType" default="none">
			<xs:annotation>
				<xs:documentation>The line's start arrow type.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="marker-end" type="virl:arrowType" default="none">
			<xs:annotation>
				<xs:documentation>The line's end arrow type.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-opacity" type="xs:float" default="1.0">
			<xs:annotation>
				<xs:documentation>The border's opacity.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke" type="virl:colorInHex" default="000000">
			<xs:annotation>
				<xs:documentation>The border's color.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-width" type="xs:integer" default="1">
			<xs:annotation>
				<xs:documentation>The border's width.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stroke-pattern" type="virl:strokePattern" default="solid">
			<xs:annotation>
				<xs:documentation>The border's pattern.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="textType">
		<xs:annotation>
			<xs:documentation>A text annotation.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="x" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>The left edge of the text.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="y" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>The top edge of the text.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="font-family" type="virl:fontFamily" default="sans-serif">
					<xs:annotation>
						<xs:documentation>The font.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="font-size" type="xs:integer" default="12">
					<xs:annotation>
						<xs:documentation>The font's point size.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="text-anchor" type="virl:textAnchor" default="start">
					<xs:annotation>
						<xs:documentation>The text's alignment.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="bold" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Whether or not the text is bold.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="italic" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Whether or not the text is italicized.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="underline" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Whether or not the text is underlined.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="strikethrough" type="xs:boolean" default="false">
					<xs:annotation>
						<xs:documentation>Whether or not the text has a strikethrough.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="fill-opacity" type="xs:float" default="1.0">
					<xs:annotation>
						<xs:documentation>The font's opacity.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="fill" type="virl:colorInHex" default="000000">
					<xs:annotation>
						<xs:documentation>The font's color.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
</xs:schema>
