<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://www.cisco.com/VIRL" version="2.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	xmlns:virl="http://www.cisco.com/VIRL">

	<xs:annotation>
		<xs:documentation>
			Topology schema for VIRL, v2.0
			This is currently only a prototype!
			(C) Copyright 2012-2014 Cisco Systems Inc.  All rights reserved.
		</xs:documentation>
	</xs:annotation>

	<xs:element name="topology">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="virl:extensible">
					<xs:sequence>
						<xs:element maxOccurs="unbounded" minOccurs="0" name="node"
							type="virl:nodeType"/>
						<xs:element name="connection" type="virl:connectionType" minOccurs="0"
							maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="connectionType">
		<xs:annotation>
			<xs:documentation>
				Connections define links (physical or not) between any model elements.
				A connection's endpoints may be nodes, but may also be a model element within a node.
				For instance, when connecting to a CRS1, it may terminate at a specific port within the platform complex.
				For bi-direction connections, the target and source elements are interchangeable, but that is up to the actual model's interpretation.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="src" use="required" type="xs:string"> </xs:attribute>
				<xs:attribute name="dst" use="required" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="nodeType">
		<xs:annotation>
			<xs:documentation>Nodes represent all edge devices on a network, and are the basic building blocks of a topology.  A node may be as simple as an IP Phone, or as complex as a fully stacked CRS1.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Any string, rendered as its label in VM Maestro. It may include special characters (e.g. newline, accents, etc), but must be escape-sequenced.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" default="SIMPLE">
					<xs:annotation>
						<xs:documentation>This indicates the node's type, and determines which (if any) schema specific validation rules to enforce on it.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="SIMPLE"/>
							<xs:enumeration value="DETAILED"/>
							<xs:enumeration value="ASSET"/>
							<xs:enumeration value="SEGMENT"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="location" type="xs:string">
					<xs:annotation>
						<xs:documentation>Specifies the node's x/y location on a canvas, in a comma-separated x,y string.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="extensible">
		<xs:sequence>
			<xs:element name="extensions" minOccurs="0">
				<xs:annotation>
					<xs:documentation>An extensions block may be added to any abstract model object.  This extensions block contains one or more entry, which is a key/value pair, allowing any metadata to be attached to any model element.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="entry" maxOccurs="unbounded">
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:attribute name="key" type="xs:string"/>
										<xs:attribute name="type" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													This type field will typically be any of the java.lang.* classes, such as String, Integer, Boolean, etc.
													However, it may even be any custom package's class, such as com.cisco.MySpiffyClass.  The only requirement is that this class's .toString() output may be used as the input parameter to the same class's constructor, in order to produce an exact copy of the original instance.
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
