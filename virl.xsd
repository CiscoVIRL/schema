<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://www.cisco.com/VIRL" version="2.0"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
	xmlns:virl="http://www.cisco.com/VIRL">

	<xs:annotation>
		<xs:documentation>
			Topology schema for VIRL, v2.0
			This is currently only a prototype!
			(C) Copyright 2012-2014 Cisco Systems Inc.  All rights reserved.
		</xs:documentation>
	</xs:annotation>

	<xs:element name="topology">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="virl:extensible">
					<xs:sequence>
						<xs:choice maxOccurs="unbounded" minOccurs="0">
							<xs:element name="group" type="virl:groupType"/>
							<xs:element name="node" type="virl:nodeType"/>
						</xs:choice>
						<xs:element name="connection" type="virl:connectionType" minOccurs="0"
							maxOccurs="unbounded"/>
					</xs:sequence>
					<xs:attribute name="schemaVersion" type="xs:decimal">
						<xs:annotation>
							<xs:documentation>This optional decimal value is used to indicate the instance document's schema version compatibility, which is not necessarily the version of the schema that updated the document.  VM Maestro uses this to enforce version specific changes.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="layout" default="Schematic">
						<xs:annotation>
							<xs:documentation>This specifies the topology's layout mode.  Schematic uses x/y locations, whereas Geographic uses lat/lon coordinates.</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="Schematic"/>
								<xs:enumeration value="Geographic"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="simulationEngine" default="None">
						<xs:annotation>
							<xs:documentation>
								This specifies which validation rules should be enforced before sending the document to the simulation back-end.  This may be as simple as warning the user about incompatibilities or missing elements (which is what VM Maestro does through visual problem markers on the graphical editor).
								Note: The current list of available options for this attribute is just a suggestion, as there are currently no other implementers.
							</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="None"/>
								<xs:enumeration value="VXR"/>
								<xs:enumeration value="OPENSTACK"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>

	<xs:complexType name="connectionType">
		<xs:annotation>
			<xs:documentation>
				Connections define links (physical or not) between any model elements.
				A connection's endpoints may be nodes, but may also be a model element within a node.
				For instance, when connecting to a CRS1, it may terminate at a specific port within the platform complex.
				For bi-direction connections, the target and source elements are interchangeable, but that is up to the actual model's interpretation.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="src" use="required" type="xs:string">
					<xs:annotation>
						<xs:documentation>
							The src and dst attributes are XPath expressions identifying the connection's endpoints.
							Note: In the case of using pre-built components, it is possible that these refer to internal components that are not necessarily present in the document.  Parsers must allow for this.  (Please contact me, Dan Bourque, for suggestions on how to achieve this)
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="dst" use="required" type="xs:string"/>
				<xs:attribute name="style" default="Solid">
					<xs:annotation>
						<xs:documentation>This is a temporary, optional attribute to affect the rendering of the line.  Eventually, this will likely be replaced with a type or state attribute, to separate the visual from model state.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Solid"/>
							<xs:enumeration value="Dashed"/>
							<xs:enumeration value="DashDot"/>
							<xs:enumeration value="DashDotDot"/>
							<xs:enumeration value="Dotted"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="groupType">
		<xs:annotation>
			<xs:documentation>A group may contain any number of sub-groups and/or nodes, allowing us unlimited depth nesting.  This effectively allows us to define arbitrarily huge topologies while allowing the UI to remain performant and intuitive.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:choice maxOccurs="unbounded" minOccurs="0">
					<xs:element name="group" type="virl:groupType"/>
					<xs:element name="node" type="virl:nodeType"/>
				</xs:choice>
				<xs:attribute name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>Any string, rendered as its label in VM Maestro. It may include special characters (e.g. newline, accents, etc), but must be escape-sequenced.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="location" type="xs:string">
					<xs:annotation>
						<xs:documentation>Specifies the node's x/y location on a canvas, in a comma-separated x,y string.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="coordinate" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional attribute might contain the node's geolocation, in a comma-separated latitude,longitude string. This is only present if the node is geographically located on a map. Otherwise, only the location attribute is needed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="layout" default="Schematic">
					<xs:annotation>
						<xs:documentation>This specifies the topology's layout mode.  Schematic uses x/y locations, whereas Geographic uses lat/lon coordinates.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="Schematic"/>
							<xs:enumeration value="Geographic"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="nodeType">
		<xs:annotation>
			<xs:documentation>Nodes represent all edge devices on a network, and are the basic building blocks of a topology.  A node may be as simple as an IP Phone, or as complex as a fully stacked CRS1.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:choice minOccurs="0">
					<xs:element name="interface" type="virl:interfaceType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="platform" type="virl:platformType" minOccurs="0"/>
				</xs:choice>
				<xs:attribute name="name" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Any string, rendered as its label in VM Maestro. It may include special characters (e.g. newline, accents, etc), but must be escape-sequenced.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" default="SIMPLE">
					<xs:annotation>
						<xs:documentation>This indicates the node's type, and determines which (if any) schema specific validation rules to enforce on it.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="SIMPLE"/>
							<xs:enumeration value="DETAILED"/>
							<xs:enumeration value="ASSET"/>
							<xs:enumeration value="SEGMENT"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="subtype" type="xs:string">
					<xs:annotation>
						<xs:documentation>If used, this attribute indicates a more specific category of node.  The list of valid subtypes depends on the back end used to simulate the topology.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="location" type="xs:string">
					<xs:annotation>
						<xs:documentation>Specifies the node's x/y location on a canvas, in a comma-separated x,y string.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="coordinate" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional attribute might contain the node's geolocation, in a comma-separated latitude,longitude string. This is only present if the node is geographically located on a map. Otherwise, only the location attribute is needed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="vmImage" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the OpenStack VM Image to use for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="vmFlavor" type="xs:string">
					<xs:annotation>
						<xs:documentation>This optional parameter may specify the OpenStack's Flavor (a.k.a. profile) to use for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv4" type="virl:ipv4Type"/>
				<xs:attribute name="ipv6" type="virl:ipv6Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPV6 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="interfaceType">
		<xs:annotation>
			<xs:documentation>Nodes of type ROUTER may declare interfaces.  Nodes of type VXR expose their interfaces by declaring ports within the VXR platform complex instead.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="id" type="virl:arrayOfInteger"/>
				<xs:attribute name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>Any string.  The valid format, such as GigabitEthernet0/0/0/2, depends on the parent node's subtype. This string will be rendered as a connection endpoint's label decoration in VM Maestro.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv4" type="virl:ipv4Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv4 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="ipv6" type="virl:ipv6Type">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv6 address for this node.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="netPrefixLenV4">
					<xs:annotation>
						<xs:documentation>This optional attribute may specify the IPv4 net prefix length for this node.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="1"/>
							<xs:maxInclusive value="32"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="netPrefixLenV6">
					<xs:annotation>
						<xs:documentation> This optional attribute may specify the IPv6 net prefix length for this node.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="1"/>
							<xs:maxInclusive value="128"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="platformType">
		<xs:annotation>
			<xs:documentation>
				New platforms must be added here.
				A generic specification mechanism is not used so that illegal platforms are detected at configuration-time rather than run-time.
				When a new concrete platform object is added to the C++ inheritance for the "Platform" object, manually add it below.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:sequence>
					<xs:element name="shelf" maxOccurs="unbounded" minOccurs="0">
						<xs:annotation>
							<xs:documentation>ServerCard's may only go into a "server" shelf, enforced at run time by the object factory.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="virl:extensible">
									<xs:choice maxOccurs="unbounded" minOccurs="0">
										<xs:element name="routeCard">
											<xs:annotation>
												<xs:documentation>
													A lcc "Shelf" may contain "LineCard" and "RouteCard".
													Note that the route cards are numbered 0 and 1 here but may be translated to a different nomenclature by the system.
													A fcc "Shelf" may contain only "ServiceCard" objects.
													The route card type defines the multi/single-chassis fabric architecture because the route card now controls the S123 and S13 fabric ASICs.
													Although the DTD does not enforce strict legal combinations, run-time will fail if the chassis complement does not fit the route card (and service card) types correctly.
													Allow Port elements on RouteCard boards even though this is not realistic as this allows for generic boards within a platform-independent context.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="virl:extensible">
														<xs:sequence>
															<xs:element name="port" maxOccurs="unbounded" minOccurs="0"
																type="virl:portType"/>
														</xs:sequence>
														<xs:attribute name="type" default="phoenixrpb">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="satori8"/>
																	<xs:enumeration value="satori16"/>
																	<xs:enumeration value="phoenixrpb"/>
																	<xs:enumeration value="paninirp"/>
																	<xs:enumeration value="pixr_rp"/>
																	<xs:enumeration value="pispirit_rp"/>
																	<xs:enumeration value="scapa_rp"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="componentID" default="0">
															<xs:simpleType>
																<xs:restriction base="xs:integer">
																	<xs:minInclusive value="0"/>
																	<xs:maxInclusive value="1"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute ref="virl:oir"/>
														<xs:attribute ref="virl:arch"/>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="lineCard">
											<xs:annotation>
												<xs:documentation>
													CRS and Topaz line cards must have a PLIM.
													Panini and Scapa line cards must NOT have a PLIM and must specify the Ports within the LineCard block.
													The "topaz" platform supports the "pearl" line card.
													The "scapa" platform supports the "scapa_xxx" line cards.
													Arch is "x86_64" or "ppc" to indicate the virtual-machine architecture or it may be another string indicating a Linux-native process model named "vxr-another_string", so arch="foo" would try to start a well-known process named "vxr-foo".
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="virl:extensible">
														<xs:sequence>
															<xs:element name="plim" maxOccurs="unbounded" minOccurs="0"
																type="virl:plimType"/>
															<xs:element name="port" maxOccurs="unbounded" minOccurs="0"
																type="virl:portType"/>
															<xs:element name="npuPort" maxOccurs="unbounded" minOccurs="0"
																type="virl:npuPortType"/>
														</xs:sequence>
														<xs:attribute name="type" default="taiko">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="taiko"/>
																	<xs:enumeration value="paninicore"/>
																	<xs:enumeration value="paninilean"/>
																	<xs:enumeration value="paniniedge"/>
																	<xs:enumeration value="pixr_lc"/>
																	<xs:enumeration value="pispirit_lc"/>
																	<xs:enumeration value="pearl"/>
																	<xs:enumeration value="scapa_20x10ge"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="componentID" default="0">
															<xs:simpleType>
																<xs:restriction base="xs:integer">
																	<xs:minInclusive value="0"/>
																	<xs:maxInclusive value="15"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute ref="virl:oir"/>
														<xs:attribute ref="virl:arch"/>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="serverCard">
											<xs:annotation>
												<xs:documentation>A server "Shelf" may contain only "ServerCard" objects.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="virl:extensible">
														<xs:sequence>
															<xs:element name="port" maxOccurs="unbounded" minOccurs="0"
																type="virl:portType"/>
														</xs:sequence>
														<xs:attribute name="type" default="x86_64">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="x86_64"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="componentID" default="0">
															<xs:simpleType>
																<xs:restriction base="xs:integer">
																	<xs:minInclusive value="0"/>
																	<xs:maxInclusive value="46"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute ref="virl:oir"/>
														<xs:attribute name="arch" default="x86_64">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="x86_64"/>
																	<xs:enumeration value="ppc"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="serviceCard">
											<xs:annotation>
												<xs:documentation>
													Service cards are only used in fabric card chassis.
													Fabric chard chassis only exist in multi-chassis platforms.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="virl:extensible">
														<xs:attribute name="type" default="panini_sc">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="panini_sc"/>
																	<xs:enumeration value="taiko_sc"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="componentID" default="0">
															<xs:simpleType>
																<xs:restriction base="xs:integer">
																	<xs:minInclusive value="0"/>
																	<xs:maxInclusive value="1"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute ref="virl:oir"/>
														<xs:attribute ref="virl:arch"/>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="fabricCard">
											<xs:annotation>
												<xs:documentation>
													The FabricCard element can describe either a "card" or "proxy" process.
													Currently, "fabric" is a Panini proxy, panini_fc and topaz_fc are VM cards, and scapa_fc is a proxy.
													The slot number is not used for proxy processes.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="virl:extensible">
														<xs:attribute name="type" default="fabric">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="taiko_s123"/>
																	<xs:enumeration value="fabric"/>
																	<xs:enumeration value="panini_s123_6"/>
																	<xs:enumeration value="panini_s123_5"/>
																	<xs:enumeration value="panini_s13"/>
																	<xs:enumeration value="panini_s2"/>
																	<xs:enumeration value="topaz_s123"/>
																	<xs:enumeration value="scapa_s123"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute name="componentID" default="0">
															<xs:simpleType>
																<xs:restriction base="xs:integer">
																	<xs:minInclusive value="0"/>
																	<xs:maxInclusive value="7"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
														<xs:attribute ref="virl:oir"/>
														<xs:attribute ref="virl:arch"/>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
									</xs:choice>
									<xs:attribute name="type" default="lcc">
										<xs:simpleType>
											<xs:restriction base="xs:string">
												<xs:enumeration value="server"/>
												<xs:enumeration value="lcc"/>
												<xs:enumeration value="fcc"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="componentID" default="0">
										<xs:simpleType>
											<xs:restriction base="xs:integer">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="79"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:extension>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="type" default="server">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="server"/>
							<xs:enumeration value="crs1"/>
							<xs:enumeration value="panini"/>
							<xs:enumeration value="paniniqq"/>
							<xs:enumeration value="pixr"/>
							<xs:enumeration value="pispirit"/>
							<xs:enumeration value="topaz"/>
							<xs:enumeration value="scapa"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="componentID" default="0">
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="0"/>
							<xs:maxInclusive value="99"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="planes" default="1">
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="1"/>
							<xs:maxInclusive value="8"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="lcc">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="fullq"/>
							<xs:enumeration value="server"/>
							<xs:enumeration value="linkwood"/>
							<xs:enumeration value="yellowjacket"/>
							<xs:enumeration value="m16"/>
							<xs:enumeration value="pi"/>
							<xs:enumeration value="none"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="fcc">
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="taikofcc"/>
							<xs:enumeration value="firin"/>
							<xs:enumeration value="none"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:attribute name="oir" default="inserted">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:enumeration value="inserted"/>
				<xs:enumeration value="removed"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:attribute>

	<xs:attribute name="arch" default="x86_64">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:enumeration value="x86_64"/>
				<xs:enumeration value="ppc"/>
				<xs:enumeration value="proxy"/>
			</xs:restriction>
		</xs:simpleType>
	</xs:attribute>

	<xs:complexType name="portType">
		<xs:annotation>
			<xs:documentation>
				Port vlan specifications are strings that are used to build an association table for line card connectivity.
				For example, if you say vlan="foobar", eventually a vlan number (or other transport handle) is assigned and every Port that has vlan="foobar" will be on that vlan.
				The connect CDATA can be "socket", "tap"  or a host:port specification like "192.168.1.1:8080".
				"socket" is the default if connect is not specified.
				The connect attribute is not relevent for a MPI transport.
				The dump attribute will add tcpdump capture of that vlan.
				The "tgn" attribute is not used by VXR but is used by dev-test scripts that parse the XML.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="componentID" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="0"/>
							<xs:maxInclusive value="39"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="type" type="xs:string" use="required"/>
				<xs:attribute name="transport" default="vxrMpi" type="virl:transport"/>
				<xs:attribute name="connect" type="xs:string"/>
				<xs:attribute name="dump" type="xs:string"/>
				<xs:attribute name="tap" type="xs:string"/>
				<xs:attribute name="tgn" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="npuPortType">
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:attribute name="componentID" use="required">
					<xs:simpleType>
						<xs:restriction base="xs:integer">
							<xs:minInclusive value="0"/>
							<xs:maxInclusive value="99"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
				<xs:attribute name="type" type="xs:string" use="required"/>
				<xs:attribute name="connect" type="xs:string"/>
				<xs:attribute name="dump" type="xs:string"/>
				<xs:attribute name="tap" type="xs:string"/>
				<xs:attribute name="tgn" type="xs:string"/>
				<xs:attribute name="npu" type="xs:string" use="required"/>
				<xs:attribute name="intf" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="plimType">
		<xs:complexContent>
			<xs:extension base="virl:extensible">
				<xs:sequence>
					<xs:element name="port" maxOccurs="unbounded" minOccurs="0" type="virl:portType"/>
				</xs:sequence>
				<xs:attribute name="type" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:simpleType name="transport">
		<xs:restriction base="xs:string">
			<xs:enumeration value="vxrQemu"/>
			<xs:enumeration value="vxrRaw"/>
			<xs:enumeration value="vxrE1000"/>
			<xs:enumeration value="vxrVio"/>
			<xs:enumeration value="vxrMpi"/>
			<xs:enumeration value="virtio"/>
			<xs:enumeration value="e1000"/>
			<xs:enumeration value="ne2k_pci"/>
			<xs:enumeration value="i82551"/>
			<xs:enumeration value="i82557b"/>
			<xs:enumeration value="i82559er"/>
			<xs:enumeration value="rtl8139"/>
			<xs:enumeration value="pcnet"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="extensible">
		<xs:sequence>
			<xs:element name="extensions" minOccurs="0">
				<xs:annotation>
					<xs:documentation>An extensions block may be added to any abstract model object.  This extensions block contains one or more entry, which is a key/value pair, allowing any metadata to be attached to any model element.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="entry" maxOccurs="unbounded">
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:attribute name="key" type="xs:string"/>
										<xs:attribute name="type" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													This type field will typically be any of the java.lang.* classes, such as String, Integer, Boolean, etc.
													However, it may even be any custom package's class, such as com.cisco.MySpiffyClass.  The only requirement is that this class's .toString() output may be used as the input parameter to the same class's constructor, in order to produce an exact copy of the original instance.
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:simpleType name="ipv4Type">
		<xs:annotation>
			<xs:documentation>
	        The ipv4Type data type is an xs:string of decimal digits separated by '.' (period) characters.  It
	        represents the 32-bit dotted-decimal notation of IPv4 addresses.  Valid IPv4 addresses contain a series of four
	        one-byte long decimal numbers (0 - 255) separated by the '.' character (a total of three '.' characters
	        appear).  A valid value of the IPv4Address data type is "212.23.123.0".  See RFC 790 in Section 2.2.2 for
	        further details on IPv4 addresses.
	      </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern
				value="(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
			/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ipv6Type">
		<xs:annotation>
			<xs:documentation>
		        The ipv6Type data type is an xs:string of hexadecimal digits ('0'-'9' and 'A'-'F' or 'a'-'f')
		        separated by ':' (colon) characters.  It represents the 128-bit notation of IPv6 addresses.  Fully expanded
		        IPv6 addresses contain a series of eight two-byte long hexadecimal numbers separated by the ":" character (a
		        total of seven ':' characters appear).  A single two-byte long hexadecimal number contains up to four
		        hexadecimal digits.  All valid IPv6 addresses are supported in the MDL.  A valid value of the ipv6Type
		        data type is "2001:DB8:0000:0056:0000:ABCD:EF12:1234".  See RFC 2460 for further details on IPv6 addresses and
		        valid shorthand notations.
		      </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern
				value="((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4]\d|[01]?\d{1,2})(\.(25[0-5]|2[0-4]\d|[01]?\d{1,2})){3})))(%.+)?"
			/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="arrayOfInteger">
		<xs:annotation>
			<xs:documentation>Space separated number. The valid format, such as 0 0 0 2, or 0 1, depends on the parent node's subtype.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9]+(\s[0-9]+)*"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
